# server have and run in 0 to 65535 ports
# container or docker have and run in 0 to 65535
# nginx AMI = any os + install nginx = nginx AMI
# nginx image = base os + nginx installed = nginx image
# yum install docker
# docker images. --> shows all images exist in the server 
# docker pull nginx or image name --> pulls image from docker hub.
# docker run nginx. - interactive mode --> exist status
# docker run -d nginx - detached mode --> running in bacground
# docker ps - shows running containers only
# docker ps -a --> shows all containers and status
# docker stop containerid. --> to stop container
# docker rm containerid --> to remove container 
# docker build .  - it means vi docker and index.html file present in samee directory or path to run docker build command.
# docker build -t myname: latest .
# docker run -d -p 80 (instace or server or host):80 (container port) or imageid --> p means port
# docker pull nginx: required version - to download required version of images 
# dock pull alpine. - low mb os
# docker create nginx: latest - image id or image name: version
# docker start containerid --> to start container
# docker rm containerid --> to remove container
# docker rmi imageid or imagename --> to remove images
# docker images -a -q --> to show all image ids
# docker rmi 'docker images -a -q'  --> to delete all images
# docker run = pull+create+start
# docker exec -it container id or name bash --> How can you login into the running container 
# docker inspect image name or id/container id or name  --> to see IP address of docker image or container 
# docker image = base os(5mb to 250 mb) + application run time+ creted users + created directory+ installed application 
# container/image= fat os (4Gb/3Gb) + application run time + created users + created directory+ installed application 
# docker build -t url/username/image:version . 
--> url means repository urls like to push docker image 
  docker.io i.e docker hub
  ECR --> elastic container registry
  Nexus --> nexus repository 
  and . means present directory 
# docker build -t image: version . --> if we building image in the local server.
# docker tag image: version url/username/image: version --> tagging image to the repository url
# docker push image: version url/username/image: version

DOCKER FILE CONTENT:

Run Vs Cmd
--------------
# FROM --> Base OS
# RUN--> it is running at the time of image building
# CMD --> it runs at the time of container creation 
# every container is a process 
# systemctl commands not working in contaOPiners
# to run services in containers, we need to give executable commands and that executable commands will run in fore ground.
# CMD ["nginx", "-g", "daemon off;"]
# LABEL --> by using label we can filter images
  docker images -f label=
# EXPOSE -- to show service running on which port.
# ENV --> like same as LABEL 
# COPY and ADD -- both are same ,  copy files from source to image or index.html
  add have 2 special options 
  it download files directly from internet by using file url
  it directly untar the tar files
# ADD sourcefile or url index.html
# COPY 
CMD VS ENTRY POINT:
------------------
# 
USER :
------------------
# it can instruct or not allow root access to the user
   USER Rajasekhar 
 WORKDIR :
-----------
# 
